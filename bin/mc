#!/usr/bin/env bash
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # not sourced
  set -e
fi

# taken from: http://stackoverflow.com/a/246128/668871
script_path="${BASH_SOURCE[0]}"
while [ -h "${script_path}" ]; do
  # resolve ${script_path} until the file is no longer a symlink
  project_path="$( cd -P "$( dirname "${script_path}" )" && pwd )"
  script_path="$(readlink "${script_path}")"
  # if ${script_path} was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${script_path} != /* ]] && script_path="${project_path}/${script_path}"
done
project_path="$( dirname "$( cd -P "$( dirname "${script_path}" )" && pwd )" )"
config_path="${HOME}/.mc-assistant.json"

script_help_hi="mc hi <project_name> [<project_path>]"
script_help_in="mc in <project_name> <shell_commands>"
script_help_go=". mc go <project_name>"
script_help="Usage: mc hi|in|go\n  ${script_help_hi}\n  ${script_help_in}\n  ${script_help_go}"

function _cleanup() {
  unset -f _cleanup
  unset -f _exit
  unset -f _read
  unset -f _write
  unset -f _hi
  unset -f _go
  unset -f _in
  unset -v project_path
  unset -v script_path
  unset -v script_help
}
trap _cleanup EXIT

# Usage: _exit [<code>]
function _exit() {
  if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # not sourced
    exit ${@}
  else
    # sourced, don't exit!
    return ${@}
  fi
}

# Usage: _read <key> [-n]
function _read() {
  local key="${1}"
  shift
  "${project_path}/bin/read" "${config_path}" "${key}" ${@}
}

# Usage: _write <key> <value>
function _write() {
  local key="${1}"
  local value="${2}"
  shift
  shift
  "${project_path}/bin/write" "${config_path}" "${key}" "${value}" ${@}
}

# Usage: _hi [-h|--help] <project_name> [<project_path>]
function _hi() {
  if [ ${#} -lt 1 ]; then
    echo "Missing argument: <project_name> is required!" 2>&1
    echo "Usage: ${script_help_hi}" 2>&1
    echo -e "Known projects:\n  $( node -p "Object.keys(JSON.parse('$( _read "projects" -n )')).join('\n  ')" )" 2>&1
    _exit 1
  elif [ "${1}" == "-h" ] || [ "${1}" == "--help" ]; then
    echo "Usage: ${script_help_hi}"
    _exit
  else
    local abs_project_path="$( node -p "require('path').resolve('${2}')" )"
    _write "projects.${1}" "${abs_project_path}"
    echo "Project ${1} (path='${abs_project_path}') has been registered with mc-assistant!"
  fi
}

# Usage: _go [-h|--help] <project_name>
function _go() {
  if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "Please source mc to change your working directory:" 2>&1
    echo "Usage: ${script_help_go}" 2>&1
    _exit 1
  elif [ ${#} -lt 1 ]; then
    echo "Missing argument: <project_name> is required!" 2>&1
    echo "Usage: ${script_help_go}" 2>&1
    _exit 1
  elif [ "${1}" == "-h" ] || [ "${1}" == "--help" ]; then
    echo "Usage: ${script_help_go}"
    _exit
  else
    local project_dir="$( _read "projects.${1}" )"
    if [ "${project_dir}" == "undefined" ]; then
      echo "Unrecognized project: ${1}" 2>&1
      _exit 1
    elif [ ! -d "${project_dir}" ]; then
      echo "Invalid project directory: ${project_dir}" 2>&1
      _exit 1
    else
      cd "${project_dir}"
    fi
  fi
}

# Usage: _in [-h|--help] <project_name> [<shell_commands>...]
function _in() {
  if [ ${#} -lt 1 ]; then
    echo "Missing argument: <project_name> is required!" 2>&1
    echo "Usage: ${script_help_in}" 2>&1
    _exit 1
  elif [ ${#} -lt 2 ]; then
    echo "Missing arguments: No commands specified!" 2>&1
    echo "Usage: ${script_help_in}" 2>&1
    _exit 1
  elif [ "${1}" == "-h" ] || [ "${1}" == "--help" ]; then
    echo "Usage: ${script_help_in}"
    _exit
  else
    local project_name="${1}"
    shift
    cd "$( _read "projects.${project_name}" )" && ${@}
  fi
}

case "${1}" in
  'hi')
    shift
    _hi ${@}
    ;;
  'go')
    shift
    _go ${@}
    ;;
  'in')
    shift
    _in ${@}
    ;;
  'read')
    shift
    _read ${@}
    ;;
  'write')
    shift
    _write ${@}
    ;;
  'help')
    echo -e "${script_help}"
    ;;
  '--help')
    echo -e "${script_help}"
    ;;
  '-h')
    echo -e "${script_help}"
    ;;
  *)
    echo "Invalid command: ${1}" 1>&2
    echo -e "${script_help}" 1>&2
    _exit 1
    ;;
esac
