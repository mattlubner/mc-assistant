#!/usr/bin/env bash
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # not sourced
  set -e
fi

# taken from: http://stackoverflow.com/a/246128/668871
script_path="${BASH_SOURCE[0]}"
while [ -h "${script_path}" ]; do
  # resolve ${script_path} until the file is no longer a symlink
  project_path="$( cd -P "$( dirname "${script_path}" )" && pwd )"
  script_path="$(readlink "${script_path}")"
  # if ${script_path} was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${script_path} != /* ]] && script_path="${project_path}/${script_path}"
done
project_path="$( dirname "$( cd -P "$( dirname "${script_path}" )" && pwd )" )"
config_path="${HOME}/.mc-assistant.json"

script_help="Usage: mc hi|go|in <command>"

function _cleanup() {
  unset -f _cleanup
  unset -f _exit
  unset -f _read
  unset -f _write
  unset -f _hi
  unset -f _go
  unset -f _in
  unset -v project_path
  unset -v script_path
  unset -v script_help
}
trap _cleanup EXIT

for arg in "${@}"
do
  case "${arg}" in
    '-h')
      echo "${script_help}"
      _exit
      ;;
    '--help')
      echo "${script_help}"
      _exit
      ;;
  esac
done

# Usage: _exit [<code>]
function _exit() {
  if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # not sourced
    exit ${@}
  else
    # sourced, don't exit!
    return ${@}
  fi
}

# Usage: _read <key>
function _read() {
  "${project_path}/bin/read" "${config_path}" "${1}"
}

# Usage: _write <key> <value>
function _write() {
  "${project_path}/bin/write" "${config_path}" "${1}" "${2}"
}

# Usage: _hi <project_name> <project_path>
function _hi() {
  local abs_project_path="$(node -p "require('path').resolve('${2}')")"
  _write "projects.${1}" "${abs_project_path}"
  echo "Project ${1} (path='${abs_project_path}') has been registered with mc-assistant!"
}

# Usage: _go <project_name>
function _go() {
  if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "Please source mc to change your working directory:" 2>&1
    echo ". mc go ${1}" 2>&1
  else
    local project_dir="$( _read "projects.${1}" )"
    if [ "${project_dir}" == "undefined" ]; then
      echo "Unrecognized project: ${1}" 2>&1
      _exit 1
    elif [ ! -d "${project_dir}" ]; then
      echo "Invalid project directory: ${project_dir}" 2>&1
      _exit 1
    else
      cd "$( _read "projects.${1}" )"
    fi
  fi
}

# Usage: _in <project_name> [<shell_commands>...]
function _in() {
  local project_name="${1}"
  shift
  cd "$( _read "projects.${project_name}" )" && ${@}
}

case "${1}" in
  'hi')
    shift
    _hi ${@}
    ;;
  'go')
    shift
    _go ${@}
    ;;
  'in')
    shift
    _in ${@}
    ;;
  'read')
    shift
    _read ${@}
    ;;
  'write')
    shift
    _write ${@}
    ;;
  'help')
    echo "${script_help}"
    ;;
  *)
    echo "Invalid command: ${1}" 1>&2
    echo "${script_help}" 1>&2
    _exit 1
    ;;
esac
